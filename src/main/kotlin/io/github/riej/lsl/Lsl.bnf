{
    parserClass="io.github.riej.lsl.LslParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Lsl"
    psiImplClassSuffix="Impl"
    psiPackage="io.github.riej.lsl.psi"
    psiImplPackage="io.github.riej.lsl.psi.impl"
    psiImplUtilClass="io.github.riej.lsl.psi.impl.LslPsiImplUtil"
    parserUtilClass="io.github.riej.lsl.LslParserUtil"

    elementTypeHolderClass="io.github.riej.lsl.psi.LslTypes"
    elementTypeClass="io.github.riej.lsl.psi.LslElementType"
    tokenTypeClass="io.github.riej.lsl.psi.LslTokenType"
    //psiTreeUtilClass="io.github.riej.lsl.LsllPsiTreeUtil"

    tokens=[
        DOT = "."
        BRACES_LEFT = "{"
        BRACES_RIGHT = "}"
        BRACKETS_LEFT = "["
        BRACKETS_RIGHT = "]"
        PARENTHESES_LEFT = "("
        PARENTHESES_RIGHT = ")"
        SEMICOLON = ";"
        COMMA = ","
        EQ = "=="
        ASSIGN = "="
        NOT_EQ = "!="
        NOT = "!"
        PLUS_PLUS = "++"
        PLUS_ASSIGN = "+="
        PLUS = "+"
        MINUS_MINUS = "--"
        MINUS_ASSIGN = "-="
        MINUS = "-"
        OR = "||"
        BITWISE_OR = "|"
        AND = "&&"
        BITWISE_AND = "&"
        SHIFT_LEFT = "<<"
        LESS_EQ = "<="
        LESS = "<"
        SHIFT_RIGHT = ">>"
        GREATER_EQ = ">="
        GREATER = ">"
        MULTIPLE_ASSIGN = "*="
        MULTIPLE = "*"
        DIVIDE_ASSIGN = "/="
        DIVIDE = "/"
        MODULUS_ASSIGN = "%="
        MODULUS = "%"
        BITWISE_NOT = "~"
        BITWISE_XOR = "^"
        LABEL = "@"
    ]

    extends("(Or|And|Add|Conversion|Mul|Selector|Conditional)Expr")=BinaryExpr
    extends(".*(Expr|Literal|Lit|OperandName)")=Expression

    pin(".*Statement") = 1
//    extends(".*Statement") = Statement

    pin('.*List(?:_\d.*)?')=1

    generateTokenAccessors = true
}

LslScript ::= GlobalDeclaration* DefaultStateDeclaration StateDeclaration* {pin(".*")=1}

private GlobalDeclaration ::= GlobalVariableDeclaration | FunctionDeclaration | ';' {recoverWhile=GlobalDeclarationRecover}
GlobalVariableDeclaration ::= TypeName Identifier ('=' Expression)? ';'  {
                                                                            /*pin(".*")=1*/
                                                                            mixin="io.github.riej.lsl.psi.impl.LslNamedElementImpl"
                                                                            implements="io.github.riej.lsl.psi.LslNamedTypedElement"
                                                                            methods=[getPrimitiveType]
                                                                        }
FunctionDeclaration ::= TypeName? Identifier '(' ArgumentsList? ')' Block {
                                                                             /*pin(".*")=1*/
                                                                             mixin="io.github.riej.lsl.psi.impl.LslNamedElementImpl"
                                                                             implements="io.github.riej.lsl.psi.LslNamedTypedElement"
                                                                             methods=[getPrimitiveType]
                                                                         }

private ArgumentsList ::= Argument (',' Argument)* {pin(".*")=1}
Argument ::= TypeName Identifier {
                                    pin(".*")=1
                                    mixin="io.github.riej.lsl.psi.impl.LslNamedElementImpl"
                                    implements="io.github.riej.lsl.psi.LslNamedTypedElement"
                                    methods=[getPrimitiveType]
                                 }

private GlobalDeclarationRecover ::= !(TypeName | raw_identifier | default | ';')

DefaultStateDeclaration ::= default StateBody {
                                                    pin(".*")=1
                                                    implements="io.github.riej.lsl.psi.LslNamedElement"
                                                    methods=[getNameIdentifier getIdentifier setName getPresentation]
                                              }
StateDeclaration ::= state Identifier StateBody {
                                                    pin(".*")=1
                                                    mixin="io.github.riej.lsl.psi.impl.LslNamedElementImpl"
                                                    implements="io.github.riej.lsl.psi.LslNamedElement"
                                                }

private StateBody ::= '{' StateEvent* '}'
StateEvent ::= Identifier '(' ArgumentsList? ')' Block {
                                                           pin(".*")=1
                                                           mixin="io.github.riej.lsl.psi.impl.LslNamedElementImpl"
                                                           implements="io.github.riej.lsl.psi.LslNamedElement"
                                                       }

Block ::= BlockInner
private BlockInner ::= '{' ('}' | (<<withOff Statements "COND" "PAR">> | (!() Statements)) '}') {pin(".*")=1}

TypeName ::=
    integer
    | float
    | string
    | key
    | vector
    | rotation
    | quaternion
    | list {methods=[getTypeToken isCompatibleType]}

Statement ::=
    LocalVariableDeclaration
    | ExpressionStatement
    | LabelStatement
    | JumpStatement
    | StateStatement
    | ReturnStatement
    | Block
    | IfStatement
    | ForStatement
    | WhileStatement
    | DoStatement
    | EmptyStatement

LocalVariableDeclaration ::= TypeName Identifier ('=' ExpressionWithRecover)? ';' {
                                                                                 pin(".*")=1
                                                                                 mixin="io.github.riej.lsl.psi.impl.LslNamedElementImpl"
                                                                                 implements="io.github.riej.lsl.psi.LslNamedTypedElement"
                                                                                 methods=[getPrimitiveType]
                                                                             }
LabelStatement ::= '@' Identifier ';' {
                                         pin(".*")=1
                                         mixin="io.github.riej.lsl.psi.impl.LslNamedElementImpl"
                                         implements="io.github.riej.lsl.psi.LslNamedElement"
                                      }
JumpStatement ::= jump Identifier ';' {pin(".*")=1 methods=[getReferences]}
StateStatement ::= state (Identifier | default) ';' {pin(".*")=1 methods=[getReferences]}
ReturnStatement ::= return ExpressionWithRecover? ';' {pin(".*")=1}
IfStatement ::= if Condition Statement ElseStatement? {pin(".*")=1}
ElseStatement ::= else Statement {pin(".*")=1}
ForStatement ::= for '(' ExpressionList? ';' ExpressionWithRecover? ';' ExpressionList ')' Statement {pin(".*")=1}
WhileStatement ::= while Condition Statement {pin(".*")=1}
DoStatement ::= do Statement while Condition ';' {pin(".*")=1}
ExpressionStatement ::= ExpressionWithRecover ';' {pin=2}
EmptyStatement ::= ';'

private Statements ::= StatementWithRecover*
private StatementWithRecover ::= Statement { pin=1 recoverWhile=StatementRecover }
private StatementRecover ::= !('!' | '~' | '(' | '+' | '-' | ';' | '{' | '}' | '@' | '<' | jump | state | return | if | else | for | while | do | TypeName | print | raw_identifier)

private Condition ::= '(' <<enterMode "COND">> Expression <<exitModeSafe "COND">> ')'

private ExpressionList ::= ExpressionWithRecover (',' ExpressionWithRecover)* {pin(".*")=1}
private ExpressionWithRecover ::= Expression {recoverWhile=ExpressionListRecover}
private ExpressionListRecover ::= !('!' | '%' | '&&' | '&' | '~' | '(' | ')' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '/' | '/=' | ';' | '<' | '<<' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '[' | ']' | '^' | '{' | '|' | '||' | '}' | '@' | if | for | while | do | state | jump | string_value | float_value | hex_integer_value | integer_value | raw_identifier)

Expression ::=
    OrExpr
    | AndExpr
    | ConditionalExpr
    | AddExpr
    | MulExpr
    | AssignExpr
    | UnaryExpr
    | UnaryPostfixExpr
    | ConversionExpr
    | MaxGroup
    | ParenthesesExpr
    {
        implements="io.github.riej.lsl.psi.LslTypedElement"
    }

fake BinaryExpr ::= Expression+  { methods=[getPrimitiveType] }

OrExpr ::= Expression '||' Expression
AndExpr ::= Expression '&&' Expression
UnaryExpr ::= UnaryOp Expression  { methods=[getPrimitiveType] }
UnaryPostfixExpr ::= Expression UnaryPostfixOp  { methods=[getPrimitiveType] }
ConditionalExpr ::= Expression RelOp Expression { methods=[getPrimitiveType] }
AddExpr ::= Expression AddOp Expression
MulExpr ::= Expression MulOp Expression
AssignExpr ::= LValue AssignOp Expression { methods=[getPrimitiveType] rightAssociative=true }
ConversionExpr ::= '(' TypeName ')' Expression { methods=[getPrimitiveType] }
ParenthesesExpr ::= '(' <<enterMode "PAR">> Expression <<exitModeSafe "PAR">> ')' {
                                                                                      pin(".*")=1
                                                                                      methods=[getPrimitiveType]
                                                                                  }

private MaxGroup ::=
    PrintExpr
    | CallExpr
    | ListExpr
    | VectorOrQuaternionImplExpr
    | Literal

private RelOp ::= '==' | '!=' | '<' | '<=' | '>' | '>='
private AssignOp ::= '+=' | '-=' | '*=' | '/=' | '%=' | '='
private AddOp ::= '+' | '-' | '|' | '^'
private MulOp ::= '*' | '/' | '%' | '<<' | '>>' | '&'
private UnaryOp ::= '++' | '--' | '+' | '-' | '!' | '^' | '~'
private UnaryPostfixOp ::= '++' | '--'

PrintExpr ::= print '(' Expression ')' {pin=1 methods=[getPrimitiveType]}
CallExpr ::= Identifier '(' ExpressionList? ')' {
    implements="io.github.riej.lsl.psi.LslTypedElement"
    methods=[getReferences getPrimitiveType]
}

ListExpr ::= '[' ExpressionList? ']' {
    pin(".*")=1
    implements="io.github.riej.lsl.psi.LslTypedElement"
    methods=[getPrimitiveType]
}

external VectorOrQuaternionImplExpr ::= parseVectorOrQuaternionExpr {extends=VectorOrQuaternionExpr elementType=VectorOrQuaternionExpr implements="io.github.riej.lsl.psi.LslTypedElement"}
fake VectorOrQuaternionExpr ::= '<' ExpressionWithRecover ',' ExpressionWithRecover ',' ExpressionWithRecover (',' ExpressionWithRecover)? '>' {methods=[isVector isQuaternion getPrimitiveType]}

ConstantValue ::=
    string_value
    | float_value
    | hex_integer_value
    | integer_value
    {
        implements="io.github.riej.lsl.psi.LslTypedElement"
        methods=[getPrimitiveType]
    }

Literal ::=
    ConstantValue
    | LValue
    {methods=[getPrimitiveType]}

LValue ::= Identifier '.' Identifier
         | Identifier
          {methods=[getReferences getPrimitiveType]}

Identifier ::= raw_identifier