/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.riej.lsl;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.github.riej.lsl.psi.LslTypes;
import com.intellij.psi.TokenType;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static io.github.riej.lsl.LslParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LslLexer.flex</tt>
 */
class LslLexer implements FlexLexer, LslTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\72\1\2\1\1\22\0\1\2\1\32\1\16\2\0\1\40\1\35\1\0\1\25\1\26"+
    "\1\4\1\33\1\30\1\14\1\15\1\3\1\11\11\10\1\0\1\27\1\36\1\31\1\37\1\0\1\43\4"+
    "\7\1\13\1\7\21\5\1\12\2\5\1\23\1\17\1\24\1\42\1\5\1\0\1\47\1\7\1\70\1\44\1"+
    "\45\1\46\1\64\1\63\1\60\1\54\1\65\1\51\1\55\1\20\1\61\1\56\1\71\1\57\1\53"+
    "\1\52\1\50\1\67\1\62\1\12\1\66\1\5\1\21\1\34\1\22\1\41\6\0\1\72\24\0\1\5\12"+
    "\0\1\5\4\0\1\5\5\0\27\5\1\0\12\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5"+
    "\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\23\5\1\0\13\5"+
    "\10\0\6\5\1\0\26\5\2\0\1\5\6\0\10\5\10\0\13\5\5\0\3\5\15\0\12\6\4\0\6\5\1"+
    "\0\1\5\17\0\2\5\7\0\2\5\12\6\3\5\2\0\2\5\1\0\16\5\15\0\11\5\13\0\1\5\16\0"+
    "\12\6\6\5\4\0\2\5\4\0\1\5\5\0\6\5\4\0\1\5\11\0\1\5\3\0\1\5\7\0\11\5\7\0\5"+
    "\5\1\0\10\5\6\0\26\5\3\0\1\5\2\0\1\5\7\0\12\5\4\0\12\6\1\5\4\0\10\5\2\0\2"+
    "\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5\1\0\1\5\5\0"+
    "\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\17\0\4\5\1\0\1\5\7\0\12\6\2\0\3\5\20"+
    "\0\11\5\1\0\2\5\1\0\2\5\1\0\5\5\3\0\1\5\2\0\1\5\30\0\1\5\13\0\10\5\2\0\1\5"+
    "\3\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3"+
    "\0\14\5\13\0\10\5\1\0\2\5\10\0\3\5\5\0\1\5\4\0\10\5\1\0\6\5\1\0\5\5\3\0\1"+
    "\5\3\0\2\5\15\0\13\5\2\0\1\5\6\0\3\5\10\0\1\5\12\0\6\5\5\0\22\5\3\0\10\5\1"+
    "\0\11\5\1\0\1\5\2\0\7\5\11\0\1\5\1\0\2\5\14\0\12\6\7\0\2\5\1\0\1\5\2\0\2\5"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1"+
    "\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\6\2\0\14\5\1\0\24\5\13\0\5\5\22\0"+
    "\7\5\4\0\4\5\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5\1\0\6\5\1\0\1\5\5\0"+
    "\1\5\2\0\13\5\1\0\15\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\16\5\2\0\6\5\2\0\15\5\2\0\1\5\1\0\10\5\7\0\15\5\1"+
    "\0\6\5\23\0\1\5\4\0\1\5\3\0\5\5\2\0\22\5\1\0\1\5\5\0\17\5\1\0\16\5\2\0\5\5"+
    "\13\0\14\5\13\0\1\5\15\0\7\5\7\0\16\5\15\0\2\5\12\6\3\0\3\5\11\0\4\5\1\0\4"+
    "\5\3\0\2\5\11\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\6\5\1\0\7\5\1\0\1\5\3\0\3"+
    "\5\1\0\7\5\3\0\4\5\2\0\6\5\14\0\2\72\7\0\1\5\15\0\1\5\2\0\1\5\4\0\1\5\2\0"+
    "\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0"+
    "\5\5\4\0\1\5\4\0\2\5\13\0\5\5\6\0\4\5\3\0\2\5\14\0\10\5\7\0\10\5\1\0\7\5\6"+
    "\0\2\5\12\0\5\5\5\0\2\5\3\0\7\5\6\0\3\5\12\6\2\5\13\0\11\5\2\0\27\5\2\0\7"+
    "\5\1\0\3\5\1\0\4\5\1\0\4\5\2\0\6\5\3\0\1\5\1\0\1\5\2\0\5\5\1\0\12\5\12\6\5"+
    "\5\1\0\3\5\1\0\10\5\4\0\7\5\3\0\1\5\3\0\2\5\1\0\1\5\3\0\2\5\2\0\5\5\2\0\1"+
    "\5\1\0\1\5\30\0\3\5\3\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5\4\0\5\5\3\0\5\5\5\0\1"+
    "\5\1\0\10\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\12\5\6\0\12\5\2\0\6\5\2\0"+
    "\6\5\2\0\6\5\2\0\3\5\3\0\14\5\1\0\16\5\1\0\2\5\1\0\2\5\1\0\10\5\6\0\4\5\4"+
    "\0\16\5\2\0\1\5\1\0\14\5\1\0\2\5\3\0\1\5\2\0\4\5\1\0\2\5\12\0\10\5\6\0\6\5"+
    "\1\0\3\5\1\0\12\5\3\0\1\5\12\0\4\5\13\0\12\6\1\5\1\0\1\5\3\0\7\5\1\0\1\5\1"+
    "\0\4\5\1\0\17\5\1\0\2\5\14\0\3\5\7\0\4\5\11\0\2\5\1\0\1\5\20\0\4\5\10\0\1"+
    "\5\13\0\10\5\5\0\3\5\2\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0"+
    "\21\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\14\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\14\5\2"+
    "\0\13\5\1\0\10\5\2\0\22\6\1\0\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1"+
    "\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0"+
    "\4\5\1\0\1\5\1\0\12\5\1\0\5\5\1\0\3\5\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\1\2\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\15\5\1\35"+
    "\1\36\1\37\1\40\2\0\1\41\1\0\1\42\1\43"+
    "\1\11\1\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\5\1\57\12\5"+
    "\1\60\4\5\1\36\1\41\1\0\1\61\3\5\1\62"+
    "\11\5\1\63\2\5\1\36\1\0\1\5\1\64\1\5"+
    "\1\65\2\5\1\66\10\5\1\67\1\70\1\5\1\71"+
    "\3\5\1\72\3\5\1\73\1\74\2\5\1\75\1\5"+
    "\1\76\1\5\1\77\1\5\1\100\2\5\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\73\0\73\0\73"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\73"+
    "\0\73\0\u019d\0\u084c\0\u0887\0\u08c2\0\73\0\73\0\73"+
    "\0\u08fd\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u0938\0\u0162\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0162\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0ce8"+
    "\0\u08c2\0\u0d23\0\u0d5e\0\u0d99\0\u0162\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0162\0\u0fe7"+
    "\0\u1022\0\73\0\u0cad\0\u105d\0\u0162\0\u1098\0\u0162\0\u10d3"+
    "\0\u110e\0\u0162\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u0162\0\u0162\0\u1321\0\u0162\0\u135c\0\u1397"+
    "\0\u13d2\0\u0162\0\u140d\0\u1448\0\u1483\0\u0162\0\u0162\0\u14be"+
    "\0\u14f9\0\u0162\0\u1534\0\u0162\0\u156f\0\u0162\0\u15aa\0\u0162"+
    "\0\u15e5\0\u1620\0\u0162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\2\7\1\13\1\14\1\15\1\2\1\7"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\7\1\44"+
    "\1\7\1\45\1\46\1\7\1\47\1\50\1\51\1\7"+
    "\1\52\2\7\1\53\1\7\1\54\1\7\1\55\75\0"+
    "\1\3\73\0\1\4\73\0\1\56\1\57\24\0\1\60"+
    "\72\0\1\61\46\0\7\7\4\0\1\7\23\0\26\7"+
    "\7\0\1\62\1\0\2\62\1\0\1\63\1\0\1\64"+
    "\27\0\1\63\33\0\1\11\1\0\2\11\1\0\1\63"+
    "\1\0\1\64\27\0\1\63\33\0\1\62\1\0\2\62"+
    "\1\65\1\63\1\0\1\64\27\0\1\63\41\0\1\66"+
    "\14\0\1\67\47\0\1\64\1\0\2\64\61\0\16\15"+
    "\1\70\1\71\53\15\31\0\1\72\72\0\1\73\72\0"+
    "\1\74\1\0\1\75\73\0\1\76\73\0\1\77\66\0"+
    "\1\100\4\0\1\101\65\0\1\102\5\0\1\103\64\0"+
    "\1\104\46\0\7\7\4\0\1\7\23\0\1\7\1\105"+
    "\13\7\1\106\10\7\6\0\7\7\4\0\1\7\23\0"+
    "\5\7\1\107\20\7\6\0\7\7\4\0\1\7\23\0"+
    "\5\7\1\110\7\7\1\111\10\7\6\0\7\7\4\0"+
    "\1\7\23\0\14\7\1\112\11\7\6\0\7\7\4\0"+
    "\1\7\23\0\6\7\1\113\17\7\6\0\7\7\4\0"+
    "\1\7\23\0\4\7\1\114\21\7\6\0\7\7\4\0"+
    "\1\7\23\0\13\7\1\115\12\7\6\0\7\7\4\0"+
    "\1\7\23\0\1\7\1\116\13\7\1\117\10\7\6\0"+
    "\7\7\4\0\1\120\23\0\2\7\1\121\23\7\6\0"+
    "\7\7\4\0\1\7\23\0\17\7\1\122\6\7\6\0"+
    "\7\7\4\0\1\7\23\0\1\7\1\123\24\7\6\0"+
    "\7\7\4\0\1\7\23\0\1\7\1\124\24\7\6\0"+
    "\7\7\4\0\1\7\23\0\4\7\1\125\21\7\1\0"+
    "\1\56\1\0\71\56\4\57\1\126\66\57\6\0\1\127"+
    "\1\0\2\127\2\0\1\130\16\0\1\130\45\0\1\64"+
    "\1\0\2\64\1\0\1\63\31\0\1\63\34\0\3\131"+
    "\1\0\1\131\30\0\4\131\20\0\1\131\20\0\3\15"+
    "\31\0\1\15\25\0\7\7\4\0\1\7\23\0\2\7"+
    "\1\132\23\7\6\0\7\7\4\0\1\7\23\0\7\7"+
    "\1\133\16\7\6\0\7\7\4\0\1\7\23\0\15\7"+
    "\1\134\10\7\6\0\7\7\4\0\1\7\23\0\13\7"+
    "\1\135\12\7\6\0\7\7\4\0\1\7\23\0\7\7"+
    "\1\136\16\7\6\0\7\7\4\0\1\7\23\0\3\7"+
    "\1\137\7\7\1\140\12\7\6\0\7\7\4\0\1\7"+
    "\23\0\11\7\1\141\14\7\6\0\7\7\4\0\1\7"+
    "\23\0\14\7\1\142\11\7\6\0\7\7\4\0\1\7"+
    "\23\0\6\7\1\143\17\7\6\0\7\7\4\0\1\7"+
    "\23\0\6\7\1\144\17\7\6\0\7\7\4\0\1\7"+
    "\23\0\6\7\1\145\17\7\6\0\7\7\4\0\1\7"+
    "\23\0\14\7\1\146\11\7\6\0\7\7\4\0\1\7"+
    "\23\0\22\7\1\147\3\7\6\0\7\7\4\0\1\7"+
    "\23\0\24\7\1\150\1\7\6\0\7\7\4\0\1\7"+
    "\23\0\3\7\1\151\22\7\1\0\3\57\1\152\1\153"+
    "\66\57\6\0\1\127\1\0\2\127\66\0\7\7\4\0"+
    "\1\7\23\0\3\7\1\154\22\7\6\0\7\7\4\0"+
    "\1\7\23\0\1\7\1\155\24\7\6\0\7\7\4\0"+
    "\1\7\23\0\3\7\1\156\22\7\6\0\7\7\4\0"+
    "\1\7\23\0\6\7\1\157\17\7\6\0\7\7\4\0"+
    "\1\7\23\0\6\7\1\160\17\7\6\0\7\7\4\0"+
    "\1\7\23\0\14\7\1\161\11\7\6\0\7\7\4\0"+
    "\1\7\23\0\12\7\1\162\13\7\6\0\7\7\4\0"+
    "\1\163\23\0\26\7\6\0\7\7\4\0\1\7\23\0"+
    "\4\7\1\164\21\7\6\0\7\7\4\0\1\7\23\0"+
    "\3\7\1\165\22\7\6\0\7\7\4\0\1\7\23\0"+
    "\1\7\1\166\24\7\6\0\7\7\4\0\1\7\23\0"+
    "\5\7\1\167\20\7\6\0\7\7\4\0\1\7\23\0"+
    "\6\7\1\170\17\7\6\0\7\7\4\0\1\7\23\0"+
    "\6\7\1\171\17\7\6\0\7\7\4\0\1\7\23\0"+
    "\4\7\1\172\21\7\6\0\7\7\4\0\1\7\23\0"+
    "\6\7\1\173\17\7\6\0\7\7\4\0\1\7\23\0"+
    "\1\7\1\174\24\7\6\0\7\7\4\0\1\175\23\0"+
    "\26\7\6\0\7\7\4\0\1\7\23\0\6\7\1\176"+
    "\17\7\6\0\7\7\4\0\1\7\23\0\13\7\1\177"+
    "\12\7\6\0\7\7\4\0\1\7\23\0\6\7\1\200"+
    "\17\7\6\0\7\7\4\0\1\7\23\0\20\7\1\201"+
    "\5\7\6\0\7\7\4\0\1\7\23\0\1\7\1\202"+
    "\24\7\6\0\7\7\4\0\1\7\23\0\15\7\1\203"+
    "\10\7\6\0\7\7\4\0\1\7\23\0\1\7\1\204"+
    "\24\7\6\0\7\7\4\0\1\7\23\0\5\7\1\205"+
    "\20\7\6\0\7\7\4\0\1\7\23\0\20\7\1\206"+
    "\5\7\6\0\7\7\4\0\1\207\23\0\26\7\6\0"+
    "\7\7\4\0\1\7\23\0\14\7\1\210\11\7\6\0"+
    "\7\7\4\0\1\7\23\0\1\7\1\211\24\7\6\0"+
    "\7\7\4\0\1\7\23\0\13\7\1\212\12\7\6\0"+
    "\7\7\4\0\1\7\23\0\13\7\1\213\12\7\6\0"+
    "\7\7\4\0\1\7\23\0\6\7\1\214\17\7\6\0"+
    "\7\7\4\0\1\7\23\0\15\7\1\215\10\7\6\0"+
    "\7\7\4\0\1\7\23\0\13\7\1\216\12\7\6\0"+
    "\7\7\4\0\1\217\23\0\26\7\6\0\7\7\4\0"+
    "\1\220\23\0\26\7\6\0\7\7\4\0\1\7\23\0"+
    "\14\7\1\221\11\7\6\0\7\7\4\0\1\7\23\0"+
    "\15\7\1\222\10\7\6\0\7\7\4\0\1\223\23\0"+
    "\26\7\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5723];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\10\11\10\1\3\11\17\1\2\11"+
    "\2\0\1\1\1\0\3\11\1\0\13\11\23\1\1\0"+
    "\21\1\1\11\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private int nestedCommentDepth = 0;
  private int tokenStringDepth = 0;

  public LslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 66: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return DIVIDE;
            } 
            // fall through
          case 68: break;
          case 4: 
            { return MULTIPLE;
            } 
            // fall through
          case 69: break;
          case 5: 
            { return RAW_IDENTIFIER;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return INTEGER_VALUE;
            } 
            // fall through
          case 71: break;
          case 7: 
            { return MINUS;
            } 
            // fall through
          case 72: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 73: break;
          case 9: 
            { return STRING_VALUE;
            } 
            // fall through
          case 74: break;
          case 10: 
            { return BRACES_LEFT;
            } 
            // fall through
          case 75: break;
          case 11: 
            { return BRACES_RIGHT;
            } 
            // fall through
          case 76: break;
          case 12: 
            { return BRACKETS_LEFT;
            } 
            // fall through
          case 77: break;
          case 13: 
            { return BRACKETS_RIGHT;
            } 
            // fall through
          case 78: break;
          case 14: 
            { return PARENTHESES_LEFT;
            } 
            // fall through
          case 79: break;
          case 15: 
            { return PARENTHESES_RIGHT;
            } 
            // fall through
          case 80: break;
          case 16: 
            { return SEMICOLON;
            } 
            // fall through
          case 81: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 82: break;
          case 18: 
            { return ASSIGN;
            } 
            // fall through
          case 83: break;
          case 19: 
            { return NOT;
            } 
            // fall through
          case 84: break;
          case 20: 
            { return PLUS;
            } 
            // fall through
          case 85: break;
          case 21: 
            { return BITWISE_OR;
            } 
            // fall through
          case 86: break;
          case 22: 
            { return BITWISE_AND;
            } 
            // fall through
          case 87: break;
          case 23: 
            { return LESS;
            } 
            // fall through
          case 88: break;
          case 24: 
            { return GREATER;
            } 
            // fall through
          case 89: break;
          case 25: 
            { return MODULUS;
            } 
            // fall through
          case 90: break;
          case 26: 
            { return BITWISE_NOT;
            } 
            // fall through
          case 91: break;
          case 27: 
            { return BITWISE_XOR;
            } 
            // fall through
          case 92: break;
          case 28: 
            { return LABEL;
            } 
            // fall through
          case 93: break;
          case 29: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 94: break;
          case 30: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 95: break;
          case 31: 
            { return DIVIDE_ASSIGN;
            } 
            // fall through
          case 96: break;
          case 32: 
            { return MULTIPLE_ASSIGN;
            } 
            // fall through
          case 97: break;
          case 33: 
            { return FLOAT_VALUE;
            } 
            // fall through
          case 98: break;
          case 34: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 99: break;
          case 35: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 100: break;
          case 36: 
            { return EQ;
            } 
            // fall through
          case 101: break;
          case 37: 
            { return NOT_EQ;
            } 
            // fall through
          case 102: break;
          case 38: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 103: break;
          case 39: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 104: break;
          case 40: 
            { return OR;
            } 
            // fall through
          case 105: break;
          case 41: 
            { return AND;
            } 
            // fall through
          case 106: break;
          case 42: 
            { return LESS_EQ;
            } 
            // fall through
          case 107: break;
          case 43: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 108: break;
          case 44: 
            { return GREATER_EQ;
            } 
            // fall through
          case 109: break;
          case 45: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 110: break;
          case 46: 
            { return MODULUS_ASSIGN;
            } 
            // fall through
          case 111: break;
          case 47: 
            { return DO;
            } 
            // fall through
          case 112: break;
          case 48: 
            { return IF;
            } 
            // fall through
          case 113: break;
          case 49: 
            { return HEX_INTEGER_VALUE;
            } 
            // fall through
          case 114: break;
          case 50: 
            { return FOR;
            } 
            // fall through
          case 115: break;
          case 51: 
            { return KEY;
            } 
            // fall through
          case 116: break;
          case 52: 
            { return ELSE;
            } 
            // fall through
          case 117: break;
          case 53: 
            { return LIST;
            } 
            // fall through
          case 118: break;
          case 54: 
            { return JUMP;
            } 
            // fall through
          case 119: break;
          case 55: 
            { return FLOAT;
            } 
            // fall through
          case 120: break;
          case 56: 
            { return STATE;
            } 
            // fall through
          case 121: break;
          case 57: 
            { return PRINT;
            } 
            // fall through
          case 122: break;
          case 58: 
            { return WHILE;
            } 
            // fall through
          case 123: break;
          case 59: 
            { return STRING;
            } 
            // fall through
          case 124: break;
          case 60: 
            { return RETURN;
            } 
            // fall through
          case 125: break;
          case 61: 
            { return VECTOR;
            } 
            // fall through
          case 126: break;
          case 62: 
            { return DEFAULT;
            } 
            // fall through
          case 127: break;
          case 63: 
            { return INTEGER;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return ROTATION;
            } 
            // fall through
          case 129: break;
          case 65: 
            { return QUATERNION;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
